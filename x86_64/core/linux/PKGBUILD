pkgname=linux
pkgver=6.2.10
pkgdesc="The Linux kernel, modules and headers package"
rver=6.2
pkgrel=3
dirname=$pkgname
arch=('x86_64')
options=('!strip' 'emptydirs')
install=linux.install
makedepends=(rsync bison bc)
commitid=5af9cc09e42142810dae6f47bfba5762fa36771e # Dont trim exports
source=(https://git.martinvlba.eu/Evolinx/linux/archive/$commitid.tar.gz)

# Deprecated as we ship modules/headers in 1 pkg now
replaces=(linux-api-headers)

export KBUILD_BUILD_HOST=evolinx-linux
export KBUILD_BUILD_USER=$pkgname
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
	cd $dirname

	echo "[!]: Cleaning src base"
	make clean

	echo "[!]: Running mrproper"
	make mrproper
}

build() {
	cd $dirname

	echo "[!]: Getting up default config of evolinx"
	make evolinx_defconfig

	make menuconfig

	echo "[!]: Started making all"
	make all -j7

	echo "[!]: Making headers"
	make headers -j7
}

package() {
	cd $dirname

	echo "[!]: Installing modules"
	make INSTALL_MOD_PATH=$pkgdir INSTALL_MOD_STRIP=1 modules_install
	rm $pkgdir/lib/modules/$pkgver-evolinx/{source,build}

	mkdir -p $pkgdir/boot

	echo "[!]: Installing vmlinuz"
	cp arch/x86/boot/bzImage $pkgdir/boot/vmlinuz-evolinx
	cp .config $pkgdir/boot/config-evolinx
	echo "${pkgver}-evolinx" > $pkgdir/lib/modules/KERNELVERSION

	echo "[!]: Installing build files..."
	local builddir="$pkgdir/lib/modules/$pkgver-evolinx/build"
	install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
	vmlinux

	install -Dt "$builddir/kernel" -m644 kernel/Makefile
	install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
	cp -t "$builddir" -a scripts

	# add objtool for external module building and enabled VALIDATION_STACK option
	install -Dt "$builddir/tools/objtool" tools/objtool/objtool

	# add xfs and shmem for aufs building
	mkdir -p "$builddir"/{fs/xfs,mm}

	echo "[!]: Installing headers"
	cp -t "$builddir" -a include
	cp -t "$builddir/arch/x86" -a arch/x86/include
	install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

	install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
	install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

	install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

	install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
	install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

	install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

	# Also insall with make ( Just to be sure that headers match with kernel )
	make headers_install INSTALL_HDR_PATH=$pkgdir/usr

	echo "[!]: Installing KConfig files"
	find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

	echo "[!]: Removing unneeded architectures"
	local arch
	for arch in "$builddir"/arch/*/; do
		[[ $arch = */x86/ ]] && continue
		echo "Removing $(basename "$arch")"
		rm -r "$arch"
	done

	echo "[!]: Removing documentation"
	rm -r "$builddir/Documentation"

	echo "[!]: Removing broken symlinks"
	find -L "$builddir" -type l -printf 'Removing %P\n' -delete

	echo "[!]: Removing loose objects"
	find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

	echo "[!]: Stripping vmlinux"
	strip -v $STRIP_STATIC "$builddir/vmlinux"

	echo "[!]: Adding src symlink to /usr/src/linux"
	mkdir -p "$pkgdir/usr/src"
	ln -sr "$builddir" "$pkgdir/usr/src/linux"
}
